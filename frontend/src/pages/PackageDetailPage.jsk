import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { 
  Container, 
  Grid, 
  Typography, 
  Box, 
  Paper, 
  Button, 
  Divider, 
  Chip, 
  List, 
  ListItem, 
  ListItemIcon, 
  ListItemText,
  Card,
  CardContent,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  Rating,
  Tab,
  Tabs,
  ImageList,
  ImageListItem,
  Alert
} from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import CheckIcon from '@mui/icons-material/Check';
import CloseIcon from '@mui/icons-material/Close';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import HotelIcon from '@mui/icons-material/Hotel';
import DirectionsCarIcon from '@mui/icons-material/DirectionsCar';
import PersonIcon from '@mui/icons-material/Person';
import { getPackageDetails } from '../redux/actions/packageActions';
import { createBooking } from '../redux/actions/bookingActions';
import Loader from '../components/common/Loader';
import { formatCurrency } from '../utils/formatCurrency';

function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`package-tabpanel-${index}`}
      aria-labelledby={`package-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

function a11yProps(index) {
  return {
    id: `package-tab-${index}`,
    'aria-controls': `package-tabpanel-${index}`,
  };
}

const PackageDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { packageDetail, loading, error } = useSelector(state => state.package);
  const { isAuthenticated } = useSelector(state => state.auth);
  const { loading: bookingLoading, success: bookingSuccess, error: bookingError, bookingId } = useSelector(state => state.booking);
  
  const [tabValue, setTabValue] = useState(0);
  const [travelDate, setTravelDate] = useState(null);
  const [travelers, setTravelers] = useState(1);
const [bookingError, setBookingError] = useState(null);

  useEffect(() => {
    dispatch(getPackageDetails(id));
  }, [dispatch, id]);

  useEffect(() => {
    if (bookingSuccess && bookingId) {
      navigate(`/payment/${bookingId}`);
    }
  }, [bookingSuccess, bookingId, navigate]);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleBookNow = () => {
    // Validate booking details
    if (!isAuthenticated) {
      navigate('/login', { state: { from: `/packages/${id}` } });
      return;
    }

    if (!travelDate) {
      setBookingError('Please select a travel date');
      return;
    }

    const bookingData = {
      package: packageDetail._id,
      travelDate,
      numberOfTravelers: travelers,
      totalPrice: packageDetail.price * travelers
    };

    dispatch(createBooking(bookingData));
  };

  if (loading) return <Loader />;
  if (error) return <Alert severity="error">{error}</Alert>;
  if (!packageDetail) return null;

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Grid container spacing={4}>
        {/* Image Gallery */}
        <Grid item xs={12} md={7}>
          <ImageList cols={2} gap={8} variant="quilted">
            {packageDetail.images.map((img, index) => (
              <ImageListItem key={index} cols={index === 0 ? 2 : 1} rows={index === 0 ? 2 : 1}>
                <img
                  src={img}
                  alt={`Package image ${index + 1}`}
                  loading="lazy"
                  style={{ 
                    width: '100%', 
                    height: '100%', 
                    objectFit: 'cover' 
                  }}
                />
              </ImageListItem>
            ))}
          </ImageList>
        </Grid>

        {/* Package Overview */}
        <Grid item xs={12} md={5}>
          <Paper elevation={3} sx={{ p: 3 }}>
            <Typography variant="h4" gutterBottom>
              {packageDetail.title}
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
              <Rating 
                value={packageDetail.averageRating || 0} 
                precision={0.5} 
                readOnly 
                size="medium" 
              />
              <Typography sx={{ ml: 2 }}>
                ({packageDetail.averageRating || 0} / 5)
              </Typography>
            </Box>

            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <LocationOnIcon color="primary" sx={{ mr: 1 }} />
              <Typography variant="body1">
                {packageDetail.destination}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <AccessTimeIcon color="primary" sx={{ mr: 1 }} />
              <Typography variant="body1">
                {packageDetail.duration} Days
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
              <PersonIcon color="primary" sx={{ mr: 1 }} />
              <Typography variant="body1">
                Max Travelers: {packageDetail.availability?.maxCapacity || 'N/A'}
              </Typography>
            </Box>

            <Typography variant="h5" color="primary" sx={{ mb: 2 }}>
              {formatCurrency(packageDetail.price)} per person
            </Typography>

            {/* Booking Form */}
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <DatePicker
                  label="Travel Date"
                  value={travelDate}
                  onChange={(newValue) => setTravelDate(newValue)}
                  renderInput={(params) => <TextField {...params} fullWidth />}
                  minDate={new Date()}
                />
                <FormControl fullWidth>
                  <InputLabel>Number of Travelers</InputLabel>
                  <Select
                    value={travelers}
                    label="Number of Travelers"
                    onChange={(e) => setTravelers(e.target.value)}
                  >
                    {[...Array(10)].map((_, i) => (
                      <MenuItem key={i + 1} value={i + 1}>
                        {i + 1} Traveler{i > 0 ? 's' : ''}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                {bookingError && (
                  <Alert severity="error">{bookingError}</Alert>
                )}
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  fullWidth
                  onClick={handleBookNow}
                  disabled={bookingLoading}
                >
                  {bookingLoading ? 'Processing...' : 'Book Now'}
                </Button>
              </Box>
            </LocalizationProvider>
          </Paper>
        </Grid>

        {/* Package Details Tabs */}
        <Grid item xs={12}>
          <Paper elevation={3}>
            <Tabs 
              value={tabValue} 
              onChange={handleTabChange} 
              aria-label="package details tabs"
              variant="fullWidth"
            >
              <Tab label="Description" {...a11yProps(0)} />
              <Tab label="Itinerary" {...a11yProps(1)} />
              <Tab label="Inclusions" {...a11yProps(2)} />
            </Tabs>
            
            <TabPanel value={tabValue} index={0}>
              <Typography variant="body1">
                {packageDetail.description}
              </Typography>
            </TabPanel>
            
            <TabPanel value={tabValue} index={1}>
              {packageDetail.itinerary.map((day) => (
                <Card key={day.day} sx={{ mb: 2 }}>
                  <CardContent>
                    <Typography variant="h6">
                      Day {day.day}: {day.title}
                    </Typography>
                    <Typography variant="body2">
                      {day.description}
                    </Typography>
                    {day.activities && (
                      <List>
                        {day.activities.map((activity, index) => (
                          <ListItem key={index}>
                            <ListItemIcon>
                              <CheckIcon color="primary" />
                            </ListItemIcon>
                            <ListItemText primary={activity} />
                          </ListItem>
                        ))}
                      </List>
                    )}
                  </CardContent>
                </Card>
              ))}
            </TabPanel>
            
            <TabPanel value={tabValue} index={2}>
              <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                  <Typography variant="h6" gutterBottom>
                    Inclusions
                  </Typography>
                  <List>
                    {packageDetail.inclusions.map((inclusion, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <CheckIcon color="primary" />
                        </ListItemIcon>
                        <ListItemText primary={inclusion} />
                      </ListItem>
                    ))}
                  </List>
                </Grid>
                <Grid item xs={12} md={6}>
                  <Typography variant="h6" gutterBottom>
                    Exclusions
                  </Typography>
                  <List>
                    {packageDetail.exclusions.map((exclusion, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <CloseIcon color="error" />
                        </ListItemIcon>
                        <ListItemText primary={exclusion} />
                      </ListItem>
                    ))}
                  </List>
                </Grid>
              </Grid>
            </TabPanel>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );
};

export default PackageDetailPage;
