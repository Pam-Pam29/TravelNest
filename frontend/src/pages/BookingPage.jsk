import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { cancelBooking } from '../redux/actions/bookingActions';
import { Link } from 'react-router-dom';
import { FaCalendarAlt, FaUsers, FaMapMarkerAlt, FaFileInvoiceDollar, FaTimesCircle } from 'react-icons/fa';
import { toast } from 'react-toastify';

const BookingCard = ({ booking }) => {
  const dispatch = useDispatch();
  const [showCancelModal, setShowCancelModal] = useState(false);

  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case 'confirmed':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const handleCancelBooking = () => {
    dispatch(cancelBooking(booking.id));
    setShowCancelModal(false);
    toast.success('Booking cancelled successfully');
  };

  const isBookingCancellable = () => {
    // Check if booking is already cancelled or completed
    if (['cancelled', 'completed'].includes(booking.status.toLowerCase())) {
      return false;
    }
    
    // Check if departure date is more than 48 hours from now
    const departureDate = new Date(booking.departureDate);
    const now = new Date();
    const hoursRemaining = (departureDate - now) / (1000 * 60 * 60);
    
    return hoursRemaining > 48;
  };

  return (
    <>
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="md:flex">
          {/* Booking image */}
          <div className="md:w-1/3 h-48 md:h-auto">
            <img 
              src={booking.package.imageUrl || '/package-placeholder.jpg'} 
              alt={booking.package.name}
              className="w-full h-full object-cover"
            />
          </div>
          
          {/* Booking details */}
          <div className="p-4 md:p-6 md:w-2/3">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-xl font-bold mb-2">{booking.package.name}</h3>
                <p className="flex items-center gap-1 text-gray-600 mb-1">
                  <FaMapMarkerAlt className="text-blue-500" /> {booking.package.location}
                </p>
              </div>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(booking.status)}`}>
                {booking.status}
              </span>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
              <div className="flex items-center gap-2">
                <FaCalendarAlt className="text-blue-500" />
                <div>
                  <p className="text-sm text-gray-500">Travel Date</p>
                  <p className="font-medium">{new Date(booking.departureDate).toLocaleDateString()} - {new Date(booking.returnDate).toLocaleDateString()}</p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <FaUsers className="text-blue-500" />
                <div>
                  <p className="text-sm text-gray-500">Travelers</p>
                  <p className="font-medium">{booking.adults} Adults, {booking.children} Children</p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <FaFileInvoiceDollar className="text-blue-500" />
                <div>
                  <p className="text-sm text-gray-500">Booking ID</p>
                  <p className="font-medium">{booking.bookingId}</p>
                </div>
              </div>
              
              <div>
                <p className="text-sm text-gray-500">Total Amount</p>
                <p className="font-medium text-lg">${booking.totalAmount.toLocaleString()}</p>
              </div>
            </div>
            
            <div className="flex flex-wrap gap-2 mt-6">
              <Link 
                to={`/booking/${booking.id}`}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
              >
                View Details
              </Link>
              
              {isBookingCancellable() && (
                <button 
                  onClick={() => setShowCancelModal(true)}
                  className="px-4 py-2 bg-white border border-red-500 text-red-500 rounded-lg hover:bg-red-50 flex items-center gap-1"
                >
                  <FaTimesCircle /> Cancel Booking
                </button>
              )}
              
              {booking.status.toLowerCase() === 'completed' && !booking.hasReview && (
                <Link 
                  to={`/review/${booking.id}`}
                  className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600"
                >
                  Leave a Review
                </Link>
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Cancel booking modal */}
      {showCancelModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold mb-4">Cancel Booking</h3>
            <p className="mb-6">Are you sure you want to cancel your booking for <span className="font-semibold">{booking.package.name}</span>? This action cannot be undone.</p>
            
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
              <p className="text-sm text-yellow-700">
                Cancellation policy: You will receive a {booking.package.cancellationPolicy || 'partial'} refund according to our cancellation policy.
              </p>
            </div>
            
            <div className="flex justify-end gap-2">
              <button 
                onClick={() => setShowCancelModal(false)}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300"
              >
                Keep Booking
              </button>
              <button 
                onClick={handleCancelBooking}
                className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
              >
                Confirm Cancellation
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default BookingCard;
