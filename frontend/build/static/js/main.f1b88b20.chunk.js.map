{"version":3,"sources":["App.tsx","index.tsx","services/authService.ts","contexts/AuthContext.tsx"],"names":["Login","React","lazy","Register","Dashboard","PackageList","PackageDetails","ProtectedRoute","_ref","children","user","useAuth","_jsx","_Fragment","Navigate","to","replace","App","AuthProvider","Router","Suspense","fallback","_jsxs","Routes","Route","path","element","rootElement","document","getElementById","ReactDOM","createRoot","render","StrictMode","API_URL","process","authService","login","credentials","response","axios","post","data","token","localStorage","setItem","JSON","stringify","register","logout","removeItem","getCurrentUser","userStr","getItem","parse","getToken","AuthContext","createContext","undefined","setUser","useState","Provider","value","async","email","password","loggedInUser","firstName","lastName","registeredUser","context","useContext","Error"],"mappings":"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","file":"static/js/main.f1b88b20.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport { AuthProvider } from './contexts/AuthContext';\r\nimport { useAuth } from './contexts/AuthContext';\r\n\r\n// Import your components\r\nconst Login = React.lazy(() => import('./components/Auth/Login'));\r\nconst Register = React.lazy(() => import('./components/Auth/Register'));\r\nconst Dashboard = React.lazy(() => import('./components/Dashboard/UserDashboard'));\r\nconst PackageList = React.lazy(() => import('./components/Packages/PackageList'));\r\nconst PackageDetails = React.lazy(() => import('./components/Packages/PackageDetails'));\r\n\r\n// Protected Route Component\r\nconst ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const { user } = useAuth();\r\n  return user ? <>{children}</> : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <Router>\r\n        <React.Suspense fallback={<div>Loading...</div>}>\r\n          <Routes>\r\n            {/* Authentication Routes */}\r\n            <Route path=\"/login\" element={<Login />} />\r\n            <Route path=\"/register\" element={<Register />} />\r\n\r\n            {/* Protected Routes */}\r\n            <Route \r\n              path=\"/dashboard\" \r\n              element={\r\n                <ProtectedRoute>\r\n                  <Dashboard />\r\n                </ProtectedRoute>\r\n              } \r\n            />\r\n            <Route \r\n              path=\"/packages\" \r\n              element={<PackageList />} \r\n            />\r\n            <Route \r\n              path=\"/packages/:id\" \r\n              element={\r\n                <ProtectedRoute>\r\n                  <PackageDetails />\r\n                </ProtectedRoute>\r\n              } \r\n            />\r\n\r\n            {/* Default Redirect */}\r\n            <Route path=\"/\" element={<Navigate to=\"/packages\" replace />} />\r\n          </Routes>\r\n        </React.Suspense>\r\n      </Router>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';  // Change this line\r\n\r\nconst rootElement = document.getElementById('root');\r\nif (rootElement) {\r\n  const root = ReactDOM.createRoot(rootElement);\r\n  root.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport { User } from '../types/User';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterCredentials extends LoginCredentials {\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport const authService = {\r\n  async login(credentials: LoginCredentials) {\r\n    const response = await axios.post(`${API_URL}/Auth/login, credentials`);\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data.user;\r\n  },\r\n  \r\n  async register(credentials: RegisterCredentials) {\r\n    const response = await axios.post(`${API_URL}/auth/register, credentials`);\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data.user;\r\n  },\r\n  \r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  },\r\n  \r\n  getCurrentUser(): User | null {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  },\r\n  \r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n};","import React, { createContext, useState, useContext, ReactNode } from 'react';\r\nimport { User } from '../types/User';\r\nimport { authService } from '../services/authService';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, password: string, firstName?: string, lastName?: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(authService.getCurrentUser());\r\n\r\n  const login = async (email: string, password: string) => {\r\n    const loggedInUser = await authService.login({ email, password });\r\n    setUser(loggedInUser);\r\n  };\r\n\r\n  const register = async (\r\n    email: string, \r\n    password: string, \r\n    firstName?: string, \r\n    lastName?: string\r\n  ) => {\r\n    const registeredUser = await authService.register({\r\n      email, \r\n      password, \r\n      firstName, \r\n      lastName\r\n    });\r\n    setUser(registeredUser);\r\n  };\r\n\r\n  const logout = () => {\r\n    authService.logout();\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"sourceRoot":""}