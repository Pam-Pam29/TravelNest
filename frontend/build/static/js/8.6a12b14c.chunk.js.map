{"version":3,"sources":["components/Packages/PackageList.tsx"],"names":["packageService","getAllPackages","filters","packagesCollection","collection","db","q","query","undefined","minPrice","where","maxPrice","destination","getDocs","docs","map","docSnapshot","data","_id","id","title","description","price","duration","destinations","availability","images","includedServices","error","console","getPackageById","packageDoc","doc","packageSnapshot","getDoc","exists","Error","createPackage","packageData","addDoc","PackageList","packages","setPackages","useState","loading","setLoading","setError","useEffect","async","packagesData","err","fetchPackages","_jsx","children","_jsxs","className","length","pkg"],"mappings":"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","file":"static/js/8.6a12b14c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  collection, \r\n  addDoc,\r\n  getDocs, \r\n  doc,\r\n  getDoc,\r\n  query,\r\n\r\n  where\r\n} from 'firebase/firestore';\r\nimport { db } from '../../firebaseConfig';\r\nimport { Package } from '../../types/Package';\r\n\r\ninterface PackageFilters {\r\n  minPrice?: number;\r\n  maxPrice?: number;\r\n  destination?: string;\r\n}\r\n\r\n// Define the service outside of the component\r\nexport const packageService = {\r\n  async getAllPackages(filters?: PackageFilters): Promise<Package[]> {\r\n    try {\r\n      const packagesCollection = collection(db, 'packages');\r\n      \r\n      // Build query based on filters\r\n      let q = query(packagesCollection);\r\n      \r\n      if (filters) {\r\n        if (filters.minPrice !== undefined) {\r\n          q = query(q, where('price', '>=', filters.minPrice));\r\n        }\r\n        \r\n        if (filters.maxPrice !== undefined) {\r\n          q = query(q, where('price', '<=', filters.maxPrice));\r\n        }\r\n        \r\n        if (filters.destination) {\r\n          q = query(q, where('destinations', 'array-contains', filters.destination));\r\n        }\r\n      }\r\n\r\n      const packagesSnapshot = await getDocs(q);\r\n      \r\n      return packagesSnapshot.docs.map(docSnapshot => {\r\n        const data = docSnapshot.data();\r\n        return {\r\n          _id: docSnapshot.id,\r\n          title: data.title || '',\r\n          description: data.description || '',\r\n          price: data.price || 0,\r\n          duration: data.duration || 0,\r\n          destinations: data.destinations || [],\r\n          availability: data.availability || 0,\r\n          images: data.images || [],\r\n          includedServices: data.includedServices || []\r\n        } as Package;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching packages', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Keep the other methods from your original code\r\n  async getPackageById(id: string): Promise<Package> {\r\n    // Your existing code\r\n    try {\r\n      const packageDoc = doc(db, 'packages', id);\r\n      const packageSnapshot = await getDoc(packageDoc);\r\n      \r\n      if (!packageSnapshot.exists()) {\r\n        throw new Error('Package not found');\r\n      }\r\n\r\n      const data = packageSnapshot.data();\r\n      return {\r\n        _id: packageSnapshot.id,\r\n        title: data.title || '',\r\n        description: data.description || '',\r\n        price: data.price || 0,\r\n        duration: data.duration || 0,\r\n        destinations: data.destinations || [],\r\n        availability: data.availability || 0,\r\n        images: data.images || [],\r\n        includedServices: data.includedServices || []\r\n      } as Package;\r\n    } catch (error) {\r\n      console.error('Error fetching package', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createPackage(packageData: Package): Promise<string> {\r\n    // Your existing code\r\n    try {\r\n      const docRef = await addDoc(collection(db, 'packages'), {\r\n        title: packageData.title,\r\n        description: packageData.description,\r\n        price: packageData.price,\r\n        duration: packageData.duration,\r\n        destinations: packageData.destinations,\r\n        availability: packageData.availability,\r\n        images: packageData.images,\r\n        includedServices: packageData.includedServices\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error creating package', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nconst PackageList: React.FC = () => {\r\n  const [packages, setPackages] = useState<Package[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchPackages = async () => {\r\n      try {\r\n        const packagesData = await packageService.getAllPackages();\r\n        setPackages(packagesData);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Failed to fetch packages');\r\n        setLoading(false);\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    fetchPackages();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading packages...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"package-list-container\">\r\n      <h1>Available Travel Packages</h1>\r\n      {packages.length === 0 ? (\r\n        <p>No packages available at the moment.</p>\r\n      ) : (\r\n        <div className=\"package-grid\">\r\n          {packages.map((pkg) => (\r\n            <div key={pkg._id} className=\"package-card\">\r\n              <h3>{pkg.title}</h3>\r\n              <p>{pkg.description}</p>\r\n              <p>Price: ${pkg.price}</p>\r\n              <p>Duration: {pkg.duration} days</p>\r\n              <p>Availability: {pkg.availability} spots left</p>\r\n              <button>View Details</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PackageList;"],"sourceRoot":""}